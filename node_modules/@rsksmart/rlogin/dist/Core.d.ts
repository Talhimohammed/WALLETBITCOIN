import * as React from 'react';
import { SimpleFunction, IProviderUserOptions } from 'web3modal';
import DataVault from '@rsksmart/ipfs-cpinner-client';
import { SDR, SD } from './ux/step2';
declare global {
    interface Window {
        ethereum: any;
        web3: any;
        updateWeb3Modal: any;
    }
}
export interface DataVaultOptions {
    [id: string]: {
        package: any;
        options?: any;
    };
}
interface IModalProps {
    userProviders: IProviderUserOptions[];
    onClose: SimpleFunction;
    resetState: SimpleFunction;
    providerController: any;
    onConnect: (provider: any, disconnect: () => void, dataVault?: DataVault) => Promise<void>;
    onError: (error: any) => Promise<void>;
    onAccountsChange: (accounts: string[]) => void;
    onChainChange: (chainId: string | number) => void;
    backendUrl?: string;
    supportedChains?: number[];
}
declare type Step = 'Step1' | 'Step2' | 'Step3' | 'error' | 'wrongNetwork';
interface ErrorDetails {
    title: string;
    description?: string;
}
interface IModalState {
    show: boolean;
    currentStep: Step;
    lightboxOffset: number;
    provider?: any;
    sdr?: SDR;
    sd?: SD;
    challenge?: string;
    address?: string;
    chainId?: number;
    errorReason?: ErrorDetails;
    dataVault?: DataVault;
}
export declare class Core extends React.Component<IModalProps, IModalState> {
    constructor(props: IModalProps);
    state: IModalState;
    lightboxRef?: HTMLDivElement | null;
    mainModalCard?: HTMLDivElement | null;
    componentDidUpdate(prevProps: IModalProps, prevState: IModalState): void;
    /** accounts related */
    private did;
    /** chain id related */
    private setChainId;
    private continueSettingUp;
    private validateCurrentChain;
    private changeMetamaskNetwork;
    /** Step 1 confirmed - user picked a wallet provider */
    private setupProvider;
    private detectFlavor;
    /** Step 2  */
    private fetchSelectiveDisclosureRequest;
    private onConfirmSelectiveDisclosure;
    /** Step 3 */
    private onConfirmAuth;
    private setLightboxRef;
    /**
     * Disconnect from WalletConnect if it is the selected provider
     * @param provider web3 Provider
     */
    private disconnectWC;
    /**
     * Handle disconnect and cleanup state
     */
    disconnect(): void;
    render: () => JSX.Element;
}
export {};
//# sourceMappingURL=Core.d.ts.map