import AuthManager from './auth-manager';
import { CreateContentPayload, CreateContentResponse, DeleteTokenPayload, GetContentPayload, Config, SwapContentPayload, SwapContentResponse, GetContentResponsePayload, StorageInformation, Backup } from './types';
import AsymmetricEncryptionManager from './encryption-manager/asymmetric';
import SignerEncryptionManager from './encryption-manager/with-signer';
declare class IPFSCpinnerClient {
    private config;
    private authManager;
    private encryptionManager;
    constructor(config: Config);
    get({ key }: GetContentPayload): Promise<GetContentResponsePayload[]>;
    getKeys(): Promise<string[]>;
    getStorageInformation(): Promise<StorageInformation>;
    getBackup(): Promise<Backup>;
    create(payload: CreateContentPayload): Promise<CreateContentResponse>;
    delete(payload: DeleteTokenPayload): Promise<boolean | void>;
    swap(payload: SwapContentPayload): Promise<SwapContentResponse>;
    private errorHandler;
}
export default IPFSCpinnerClient;
export { AuthManager, AsymmetricEncryptionManager, SignerEncryptionManager };
//# sourceMappingURL=index.d.ts.map