import axios from 'axios';
import { IAuthManager, DIDAuthConfig, PersonalSign, KeyValueStore, DIDAuthStoreConfig, DIDAuthServiceConfig } from './types';
import { Web3Provider } from '../web3provider/types';
declare class AuthManager implements IAuthManager {
    store: KeyValueStore;
    did: string;
    serviceUrl: string;
    personalSign: PersonalSign;
    csrfHeader: string;
    cookies: string[];
    constructor(config: DIDAuthConfig);
    private storeTokens;
    private getStoredAccessToken;
    private getStoredRefreshToken;
    private getChallenge;
    private signChallenge;
    private login;
    private refreshAccessToken;
    getAccessToken(): Promise<string>;
    storedTokens: () => Promise<{
        accessToken: string;
        refreshToken: string;
    }>;
    getHeaders: () => Promise<{
        'x-logged-did': string;
        'x-csrf-token': string;
        cookie: string;
    }>;
    get: typeof axios.get;
    post: typeof axios.post;
    delete: typeof axios.delete;
    put: typeof axios.put;
    static fromWeb3Provider(config: DIDAuthServiceConfig & DIDAuthStoreConfig, provider: Web3Provider): Promise<AuthManager>;
}
export default AuthManager;
//# sourceMappingURL=testing.d.ts.map